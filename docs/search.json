[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 snowflakeR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrikios. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Patrikios (2025). snowflakeR: Lightweight R6 Connector Helpers Snowflake via ODBC.. R package version 0.1.0.","code":"@Manual{,   title = {snowflakeR: Lightweight R6 Connector and Helpers for Snowflake via ODBC.},   author = {{Patrikios}},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"snowflaker","dir":"","previous_headings":"","what":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"Lightweight R6 Connector & helpers Snowflake ODBC. YAML: credentials read files; use DSN /pass uid, pwd, etc. Safe SQL: glue::glue_sql() .con binds parameters safely. Lineage: result gets data.table attribute \"snowflake-sources\" listing objects seen SQL (/JOIN/CALL). Transactions: begin/commit/rollback helpers. Dev-friendly: works smoothly devtools::load_all() devtools::document().","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"","code":"# Recommended install.packages(\"remotes\") remotes::install_github(\"Patrikios/snowflakeR\", build_vignettes = FALSE)  # or with devtools # install.packages(\"devtools\") devtools::install_github(\"Patrikios/snowflakeR\", build_vignettes = FALSE)"},{"path":"/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"Snowflake ODBC driver installed working DSN machine: Snowflake ODBC Documentation R6 Class SnowflakeConnector accepts connection parameters found ODBC Connection Configuration page. Snowflake user access role/warehouse/db/schema. R ≥ 4.1 package deliberately parse YAML files manage secrets. Keep secrets DSN, environment variables, pass arguments.","code":""},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"","code":"library(snowflakeR)  # R6 connector # New SnowflakeConnector instance using key-pair authentication. # Key-pair authentication (AUTHENTICATOR = \"SNOWFLAKE_JWT\") disregards the  # password field and uses the 'PRIV_KEY_FILE' file path to the private key (for # example file names 'rsa_key.p8'). key_path <- \"~/keys/rsa_key.p8\" con <- SnowflakeConnector$new(   dsn           = \"your-snowflake-dsn\",   uid           = \"your-snowflake-user,   role          = \"your-snowflake-role\",   warehouse     = \"your-snowflake-warehouse\",   database      = \"your-snowflake-database\",   schema        = \"your-snowflake-schema\"   tz            = \"Europe/Berlin\",   tz_out        = \"Europe/Berlin\",   AUTHENTICATOR = \"SNOWFLAKE_JWT\",   PRIV_KEY_FILE = key_path )  # run query 1, return data.table object con$run_query(\"show tables\")  # get a table res <- con$run_query(\"SELECT * FROM your_schema.your_table LIMIT 100\")  # returns data.table object str(res)  # automatic parses the sources that were queried within statement attr(res, \"snowflake-sources\")  # show query history on the connection con$run_query_history   # Parameterized, safely interpolated query min_id <- 1000 res <- con$run_query(   \"SELECT * FROM your_schema.your_table WHERE id > {min_id} LIMIT 100\"   ) str(res) attr(res, \"snowflake-sources\")  # Write data con$write_data(   DBI::Id(schema = \"STAGE\", table = \"TMP_UPLOAD\"),    value = res,    overwrite = TRUE   )  # Transactions con$transaction_begin() # ... your dbExecute/dbWriteTable calls ... con$transaction_commit() # or con$transaction_rollback()  # Close con$close()"},{"path":[]},{"path":"/index.html","id":"id_1-safe-parameter-interpolation","dir":"","previous_headings":"Usage patterns","what":"1) Safe parameter interpolation","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"","code":"country <- \"DE\" since   <- as.POSIXct(\"2025-01-01\", tz = \"UTC\")  con$run_query(\"   SELECT country, COUNT(*) AS n   FROM sales.orders   WHERE country = {country}     AND created_at >= {since}   GROUP BY country \")"},{"path":"/index.html","id":"id_2-switching-context-roledbschemawarehouse","dir":"","previous_headings":"Usage patterns","what":"2) Switching context (role/db/schema/warehouse)","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"Prefer DSN. needed, pass context constructor, give user rights use selected objects roles:","code":"SnowflakeConnector$new(   dsn = \"snowflake-dsn\",   role = \"DATA_SCIENTIST\",   warehouse = \"COMPUTE_WH\",   database = \"ANALYTICS\",   schema = \"PUBLIC\"   ... )"},{"path":"/index.html","id":"id_3-writing-efficiently","dir":"","previous_headings":"Usage patterns","what":"3) Writing efficiently","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"bulk loads, prefer staging + COPY SQL. small/medium frames:","code":"con$write_data(   DBI::Id(schema = \"UTIL\", table = \"SMALL_LOAD\"),    mtcars,    overwrite = TRUE   )"},{"path":"/index.html","id":"development","dir":"","previous_headings":"Usage patterns","what":"Development","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"","code":"# 1) Load dev helpers devtools::load_all()  # 2) Generate docs devtools::document()  # 3) Run tests (live tests are opt-in) testthat::test_local()           # unit tests Sys.setenv(SNOWFLAKER_RUN_LIVE = \"true\", SNOWFLAKER_DSN = \"snowflake-data-science\") testthat::test_file(\"tests/testthat/test-r6-connector.R\")"},{"path":"/index.html","id":"testing-strategy","dir":"","previous_headings":"Usage patterns","what":"Testing strategy","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"Unit tests cover pure helpers (sqlQuerySources, etc.) without Snowflake. Live tests skipped default; enable env var SNOWFLAKER_RUN_LIVE=true provide SNOWFLAKER_DSN.","code":""},{"path":"/index.html","id":"faq","dir":"","previous_headings":"Usage patterns","what":"FAQ","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"Q: credentials come ?: ODBC DSN /arguments (uid, pwd). don’t read YAML. Q: use key-pair auth?: Configure DSN / driver settings (outside package) pass relevant connect arguments supported odbc/Snowflake (e.g. authenticator, priv_key_file) directly SnowflakeConnector$new(…, authenticator=“SNOWFLAKE_JWT”, priv_key_file=“…”). package forwards … DBI::dbConnect(). Q: Can interpolate identifiers?: Use DBI::Id(schema=“…”, table=“…”) write targets; dynamic identifiers SELECTs, build strings carefully use glue::glue_sql() SQL objects. Keep safe.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"Usage patterns","what":"License","title":"Lightweight R6 Connector and Helpers for Snowflake via ODBC.","text":"MIT + file LICENSE","code":""},{"path":"/reference/SnowflakeConnector.html","id":null,"dir":"Reference","previous_headings":"","what":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"SnowflakeConnector encapsulates Snowflake ODBC connection : Safe SQL interpolation via glue::glue_sql() bound connection Query history tracking (run_query_history) data.table::setattr lineage \"snowflake-sources\" Simple transactions ($transaction_begin/commit/rollback) Simple writes ($write_data) Credentials expected provided DSN /constructor arguments (uid, pwd, etc.). package read YAML files.","code":""},{"path":"/reference/SnowflakeConnector.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"connection live DBI ODBC connection object. run_query_history data.table columns query result.","code":""},{"path":[]},{"path":"/reference/SnowflakeConnector.html","id":"public-fields-1","dir":"Reference","previous_headings":"","what":"Public fields","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"connection live DBI ODBC connection object. run_query_history data.table columns query result.","code":""},{"path":[]},{"path":"/reference/SnowflakeConnector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"SnowflakeConnector$new() SnowflakeConnector$close() SnowflakeConnector$run_query() SnowflakeConnector$write_data() SnowflakeConnector$transaction_begin() SnowflakeConnector$transaction_commit() SnowflakeConnector$transaction_rollback() SnowflakeConnector$clone()","code":""},{"path":"/reference/SnowflakeConnector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"Construct new connector (opens connection).","code":""},{"path":"/reference/SnowflakeConnector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"","code":"SnowflakeConnector$new(   dsn,   uid = NULL,   pwd = NULL,   database = NULL,   schema = NULL,   role = NULL,   warehouse = NULL,   timezone = Sys.timezone(),   timezone_out = Sys.timezone(),   ... )"},{"path":"/reference/SnowflakeConnector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"dsn ODBC DSN name. uid Optional user id (overrides DSN). pwd Optional password (overrides DSN). database Optional default database. schema Optional default schema. role Optional default role. warehouse Optional default warehouse. timezone Server timezone connection. Defaults Sys.timezone(). timezone_out Timezone datetimes returned R. Defaults Sys.timezone(). ... Additional arguments passed DBI::dbConnect().","code":""},{"path":"/reference/SnowflakeConnector.html","id":"method-close-","dir":"Reference","previous_headings":"","what":"Method close()","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"Close connection.","code":""},{"path":"/reference/SnowflakeConnector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"","code":"SnowflakeConnector$close()"},{"path":"/reference/SnowflakeConnector.html","id":"method-run-query-","dir":"Reference","previous_headings":"","what":"Method run_query()","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"Execute SELECT return data.table (lineage attribute).","code":""},{"path":"/reference/SnowflakeConnector.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"","code":"SnowflakeConnector$run_query(   SQL,   literal = FALSE,   glue_envir = parent.frame(1L) )"},{"path":"/reference/SnowflakeConnector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"SQL SQL string (glue placeholders allowed). literal TRUE, skip parameter quoting (passed glue_sql()). glue_envir Environment glue placeholders evaluated.","code":""},{"path":"/reference/SnowflakeConnector.html","id":"method-write-data-","dir":"Reference","previous_headings":"","what":"Method write_data()","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"Write data.frame / data.table Snowflake.","code":""},{"path":"/reference/SnowflakeConnector.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"","code":"SnowflakeConnector$write_data(table, value, ...)"},{"path":"/reference/SnowflakeConnector.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"table Target table name (character) DBI::Id. value Data write (data.frame / data.table). ... Passed DBI::dbWriteTable() (e.g., append = TRUE, overwrite = TRUE).","code":""},{"path":"/reference/SnowflakeConnector.html","id":"method-transaction-begin-","dir":"Reference","previous_headings":"","what":"Method transaction_begin()","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"Begin transaction.","code":""},{"path":"/reference/SnowflakeConnector.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"","code":"SnowflakeConnector$transaction_begin()"},{"path":"/reference/SnowflakeConnector.html","id":"method-transaction-commit-","dir":"Reference","previous_headings":"","what":"Method transaction_commit()","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"Commit transaction.","code":""},{"path":"/reference/SnowflakeConnector.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"","code":"SnowflakeConnector$transaction_commit()"},{"path":"/reference/SnowflakeConnector.html","id":"method-transaction-rollback-","dir":"Reference","previous_headings":"","what":"Method transaction_rollback()","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"Roll back transaction.","code":""},{"path":"/reference/SnowflakeConnector.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"","code":"SnowflakeConnector$transaction_rollback()"},{"path":"/reference/SnowflakeConnector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"objects class cloneable method.","code":""},{"path":"/reference/SnowflakeConnector.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"","code":"SnowflakeConnector$clone(deep = FALSE)"},{"path":"/reference/SnowflakeConnector.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"deep Whether make deep clone.","code":""},{"path":"/reference/SnowflakeConnector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SnowflakeConnector: An R6 Snowflake ODBC helper — SnowflakeConnector","text":"","code":"if (FALSE) { # \\dontrun{ con <- SnowflakeConnector$new(   dsn = \"snowflake-bi\",   role = \"ANALYST\",   warehouse = \"BI_WH\",   database = \"PROD_DB\",   schema = \"PRESENTATION\" ) con$run_query(\"show tables;\") con$run_query(\"select 1 as x\") con$run_query_history con$close() } # }"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/snowflakeR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"snowflakeR: Lightweight R6 Connector for Snowflake via ODBC — snowflakeR-package","title":"snowflakeR: Lightweight R6 Connector for Snowflake via ODBC — snowflakeR-package","text":"small, focused package providing R6-based Snowflake connector ODBC convenient query execution (glue-sql interpolation), data.table attributes lineage, simple transaction write helpers. Credentials expected provided ODBC DSN /function arguments; YAML similar parsing credentials included. Functionality includes reading data writing data Snowflake account well execute queries supports simple transactional processing. system requirement (outside R) Snowflake ODBC driver + configured DSN host.","code":""},{"path":"/reference/snowflakeR-package.html","id":"philosophy","dir":"Reference","previous_headings":"","what":"Philosophy","title":"snowflakeR: Lightweight R6 Connector for Snowflake via ODBC — snowflakeR-package","text":"Keep credentials outside package (DSN / environment / call args). Keep usage simple (R6 $run_query(), $write_data(), transactions). Keep strings safe using glue::glue_sql() (.con binding). Attach SQL lineage data.table::setattr().","code":""},{"path":"/reference/snowflakeR-package.html","id":"requirements","dir":"Reference","previous_headings":"","what":"Requirements","title":"snowflakeR: Lightweight R6 Connector for Snowflake via ODBC — snowflakeR-package","text":"must Snowflake ODBC driver installed working, DSN configured system. package read YAML config files.","code":""},{"path":"/reference/snowflakeR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"snowflakeR: Lightweight R6 Connector for Snowflake via ODBC — snowflakeR-package","text":"Maintainer: Patrikios Patrikios@users.noreply.github.com","code":""}]
